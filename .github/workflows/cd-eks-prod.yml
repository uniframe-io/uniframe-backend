on:
  push:
    branches:
      - main

name: Deploy to UniFrame Prod Environment

jobs:
  deploy:
    name: Continuous Delivery
    runs-on: ubuntu-latest
    env:
      DEPLOY_ENV: prod
      AWS_ACCOUNT_ID: "706173320044"
      PRODUCT_PREFIX: uniframe
      AWS_CD_ROLE: uniframe-prod-cd-service-role
      AWS_ENV_REGION: eu-west-1
      EKS_NAMESPACE: nm

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.UNIFRAME_CD_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.UNIFRAME_CD_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_ENV_REGION }}

    - name: Load aws-cli
      id: aws-cli
      run: |
        pip --no-cache-dir install awscli==1.19.72
        aws sts assume-role --role-arn "arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_CD_ROLE }}" --role-session-name github-actions-cd --external-id github.com | tee >(echo "AccessKeyId=$(jq .Credentials.AccessKeyId | tr -d '"')" >> $GITHUB_ENV)  >(echo "SessionToken=$( jq .Credentials.SessionToken | tr -d '"')" >> $GITHUB_ENV ) >(echo "SecretAccessKey=$(jq .Credentials.SecretAccessKey | tr -d '"')" >> $GITHUB_ENV )
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.UNIFRAME_CD_AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.UNIFRAME_CD_AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ env.AWS_ENV_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ env.AccessKeyId }}
        AWS_SECRET_ACCESS_KEY: ${{ env.SecretAccessKey }}
        AWS_SESSION_TOKEN: ${{ env.SessionToken }}

    - name: Get Backend Params
      id: get-backend-params
      run: |
        aws ssm get-parameters --names "${{ env.PRODUCT_PREFIX }}-${{ env.DEPLOY_ENV }}-ssm-backend-repo-name" --query "Parameters[*].Value | [0]" | echo "ECR_REPOSITORY=$(tr -d '"')" >> $GITHUB_ENV
        aws ssm get-parameters --names "${{ env.PRODUCT_PREFIX }}-${{ env.DEPLOY_ENV }}-ssm-eks-domain-name" --query "Parameters[*].Value | [0]" | echo "DOMAIN_NAME=$(tr -d '"')" >> $GITHUB_ENV        
      env:
        AWS_ACCESS_KEY_ID: ${{ env.AccessKeyId }}
        AWS_SECRET_ACCESS_KEY: ${{ env.SecretAccessKey }}
        AWS_SESSION_TOKEN: ${{ env.SessionToken }}


    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR so that it can be deployed to EKS.
        docker build --build-arg DEPLOY_ENV=${{ env.DEPLOY_ENV }} --build-arg PRODUCT_PREFIX=${{ env.PRODUCT_PREFIX }} --build-arg DOMAIN_NAME=${{ env.DOMAIN_NAME }} --build-arg IMAGE_TAG=$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY . -f Dockerfile.deploy
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG 
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Install kubectl
      id: install-kubectl
      run: |
        # follow this instruction: https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl
        sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
        echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list        
        sudo apt-get update
        sudo apt-get install -y kubectl

    - name: Update EKS deployment images
      id: update-eks-image
      run: |
        EKS_NAME=$(aws ssm get-parameters --names ${{ env.PRODUCT_PREFIX }}-${{ env.DEPLOY_ENV }}-ssm-eks-cluster-name --query "Parameters[0].Value" | tr -d '"')
        aws eks update-kubeconfig --name ${EKS_NAME}
        kubectl set image -n ${{ env.EKS_NAMESPACE }} deployment/uniframe-${{ env.DEPLOY_ENV }}-backend-deployment backend=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
        kubectl set image -n ${{ env.EKS_NAMESPACE }} deployment/uniframe-${{ env.DEPLOY_ENV }}-housekeeper-deployment housekeeper=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}        
      env:
        AWS_ACCESS_KEY_ID: ${{ env.AccessKeyId }}
        AWS_SECRET_ACCESS_KEY: ${{ env.SecretAccessKey }}
        AWS_SESSION_TOKEN: ${{ env.SessionToken }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}        